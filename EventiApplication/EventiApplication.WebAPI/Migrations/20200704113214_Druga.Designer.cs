// <auto-generated />
using System;
using EventiApplication.WebAPI.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EventiApplication.WebAPI.Migrations
{
    [DbContext(typeof(MojContext))]
    [Migration("20200704113214_Druga")]
    partial class Druga
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EventiApplication.WebAPI.Database.Administrator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GradId")
                        .HasColumnType("int");

                    b.Property<string>("Ime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uloga")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GradId");

                    b.ToTable("Administrator");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin1@mail.com",
                            GradId = 1,
                            Ime = "Admin1",
                            PasswordHash = "yxMZirz3bBUdgji6aVYI8bkBHXs=",
                            PasswordSalt = "vFyyMXXLf87wKxdw0gH3Dg==",
                            Prezime = "Prezime1",
                            Telefon = "063444555",
                            Uloga = "Administrator",
                            Username = "desktop"
                        });
                });

            modelBuilder.Entity("EventiApplication.WebAPI.Database.Drzava", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Drzava");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Naziv = "BiH"
                        });
                });

            modelBuilder.Entity("EventiApplication.WebAPI.Database.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdministratorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DatumOdrzavanja")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsOdobren")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOtkazan")
                        .HasColumnType("bit");

                    b.Property<int?>("KategorijaId")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrganizatorId")
                        .HasColumnType("int");

                    b.Property<int>("ProstorOdrzavanjaId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Slika")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("SlikaThumb")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("VrijemeOdrzavanja")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdministratorId");

                    b.HasIndex("KategorijaId");

                    b.HasIndex("OrganizatorId");

                    b.HasIndex("ProstorOdrzavanjaId");

                    b.ToTable("Event");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdministratorId = 1,
                            DatumOdrzavanja = new DateTime(2020, 8, 3, 13, 32, 13, 508, DateTimeKind.Local).AddTicks(8630),
                            IsOdobren = true,
                            IsOtkazan = false,
                            KategorijaId = 2,
                            Naziv = "Event1",
                            Opis = "...",
                            OrganizatorId = 1,
                            ProstorOdrzavanjaId = 1,
                            VrijemeOdrzavanja = "20:00"
                        },
                        new
                        {
                            Id = 2,
                            AdministratorId = 1,
                            DatumOdrzavanja = new DateTime(2020, 8, 3, 13, 32, 13, 512, DateTimeKind.Local).AddTicks(2943),
                            IsOdobren = true,
                            IsOtkazan = false,
                            KategorijaId = 1,
                            Naziv = "Event2",
                            Opis = "...",
                            OrganizatorId = 2,
                            ProstorOdrzavanjaId = 2,
                            VrijemeOdrzavanja = "20:00"
                        },
                        new
                        {
                            Id = 3,
                            AdministratorId = 1,
                            DatumOdrzavanja = new DateTime(2020, 8, 3, 13, 32, 13, 512, DateTimeKind.Local).AddTicks(3091),
                            IsOdobren = true,
                            IsOtkazan = false,
                            KategorijaId = 3,
                            Naziv = "Event3",
                            Opis = "...",
                            OrganizatorId = 1,
                            ProstorOdrzavanjaId = 3,
                            VrijemeOdrzavanja = "20:00"
                        });
                });

            modelBuilder.Entity("EventiApplication.WebAPI.Database.Grad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DrzavaId")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DrzavaId");

                    b.ToTable("Grad");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DrzavaId = 1,
                            Naziv = "Sarajevo"
                        },
                        new
                        {
                            Id = 2,
                            DrzavaId = 1,
                            Naziv = "Mostar"
                        });
                });

            modelBuilder.Entity("EventiApplication.WebAPI.Database.Karta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("Cijena")
                        .HasColumnType("real");

                    b.Property<DateTime>("DatumKupovine")
                        .HasColumnType("datetime2");

                    b.Property<int>("KupovinaTipId")
                        .HasColumnType("int");

                    b.Property<byte[]>("QrCode")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("TipKarteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KupovinaTipId");

                    b.HasIndex("TipKarteId");

                    b.ToTable("Karta");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cijena = 10f,
                            DatumKupovine = new DateTime(2020, 7, 4, 13, 32, 13, 513, DateTimeKind.Local).AddTicks(7831),
                            KupovinaTipId = 1,
                            TipKarteId = 2
                        });
                });

            modelBuilder.Entity("EventiApplication.WebAPI.Database.Kategorija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Kategorija");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Naziv = "Muzika"
                        },
                        new
                        {
                            Id = 2,
                            Naziv = "Kultura"
                        },
                        new
                        {
                            Id = 3,
                            Naziv = "Sport"
                        });
                });

            modelBuilder.Entity("EventiApplication.WebAPI.Database.Korisnik", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adresa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GradId")
                        .HasColumnType("int");

                    b.Property<string>("Ime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAktivan")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostanskiBroj")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Slika")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("SlikaThumb")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Telefon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uloga")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GradId");

                    b.ToTable("Korisnik");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Adresa = "Adresa1",
                            Email = "testiranjeslanjamaila@gmail.com",
                            GradId = 1,
                            Ime = "Korisnik1",
                            IsAktivan = true,
                            PasswordHash = "wJra1wIk1iH7fLYbNEF3u8c5Q4k=",
                            PasswordSalt = "4ep+DNUB0ML5U4Dsy3+kiw==",
                            PostanskiBroj = "71000",
                            Prezime = "Prezime1",
                            Telefon = "061222333",
                            Uloga = "Korisnik",
                            Username = "mobile"
                        },
                        new
                        {
                            Id = 2,
                            Adresa = "Adresa2",
                            Email = "testiranjeslanjamaila@gmail.com",
                            GradId = 1,
                            Ime = "Korisnik2",
                            IsAktivan = true,
                            PasswordHash = "tNSptZALZQ1pTULttvZNg34WI3Y=",
                            PasswordSalt = "0E60R1/uuINBbNREFJqXQQ==",
                            PostanskiBroj = "71000",
                            Prezime = "Prezime2",
                            Telefon = "062333444",
                            Uloga = "Korisnik",
                            Username = "Korisnik2"
                        },
                        new
                        {
                            Id = 3,
                            Adresa = "Adresa3",
                            Email = "testiranjeslanjamaila@gmail.com",
                            GradId = 1,
                            Ime = "Korisnik3",
                            IsAktivan = true,
                            PasswordHash = "gsfJmTdTY1dIr03VnSa5o/W8K44=",
                            PasswordSalt = "Qs66TbGxDGBQOX96QSojQQ==",
                            PostanskiBroj = "71000",
                            Prezime = "Prezime3",
                            Telefon = "062888999",
                            Uloga = "Korisnik",
                            Username = "Korisnik3"
                        },
                        new
                        {
                            Id = 4,
                            Adresa = "Adresa4",
                            Email = "testiranjeslanjamaila@gmail.com",
                            GradId = 1,
                            Ime = "Korisnik4",
                            IsAktivan = true,
                            PasswordHash = "h6mnNJjq2sCSkw8wVOiKaklki08=",
                            PasswordSalt = "og2x/h6oRC9CvFOPCUk33A==",
                            PostanskiBroj = "71000",
                            Prezime = "Prezime4",
                            Telefon = "061222333",
                            Uloga = "Korisnik",
                            Username = "Korisnik4"
                        },
                        new
                        {
                            Id = 5,
                            Adresa = "Adresa5",
                            Email = "testiranjeslanjamaila@gmail.com",
                            GradId = 1,
                            Ime = "Korisnik5",
                            IsAktivan = true,
                            PasswordHash = "788P+omp+lKbUHtVmrpAwiS8MtE=",
                            PasswordSalt = "og2x/h6oRC9CvFOPCUk33A==",
                            PostanskiBroj = "71000",
                            Prezime = "Prezime5",
                            Telefon = "061666333",
                            Uloga = "Korisnik",
                            Username = "Korisnik5"
                        });
                });

            modelBuilder.Entity("EventiApplication.WebAPI.Database.Kupovina", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("KorisnikId");

                    b.ToTable("Kupovina");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EventId = 2,
                            KorisnikId = 1
                        });
                });

            modelBuilder.Entity("EventiApplication.WebAPI.Database.KupovinaTip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrojKarata")
                        .HasColumnType("int");

                    b.Property<float>("Cijena")
                        .HasColumnType("real");

                    b.Property<int>("KupovinaId")
                        .HasColumnType("int");

                    b.Property<int?>("ProdajaTipId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KupovinaId");

                    b.HasIndex("ProdajaTipId");

                    b.ToTable("KupovinaTip");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrojKarata = 1,
                            Cijena = 10f,
                            KupovinaId = 1,
                            ProdajaTipId = 2
                        });
                });

            modelBuilder.Entity("EventiApplication.WebAPI.Database.Like", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DatumLajka")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("KorisnikId");

                    b.ToTable("Like");
                });

            modelBuilder.Entity("EventiApplication.WebAPI.Database.Ocjena", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<int>("OcjenaEventa")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("KorisnikId");

                    b.ToTable("Ocjena");
                });

            modelBuilder.Entity("EventiApplication.WebAPI.Database.Organizator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GradId")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uloga")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GradId");

                    b.ToTable("Organizator");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "org1@mail.com",
                            GradId = 1,
                            Naziv = "Org1",
                            Telefon = "061222222",
                            Uloga = "Organizator"
                        },
                        new
                        {
                            Id = 2,
                            Email = "org2@mail.com",
                            GradId = 1,
                            Naziv = "Org2",
                            Telefon = "061555555",
                            Uloga = "Organizator"
                        },
                        new
                        {
                            Id = 3,
                            Email = "org3@mail.com",
                            GradId = 1,
                            Naziv = "Org3",
                            Telefon = "061333333",
                            Uloga = "Organizator"
                        });
                });

            modelBuilder.Entity("EventiApplication.WebAPI.Database.PozivNaEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<bool>("IsOdbijen")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrihvacen")
                        .HasColumnType("bit");

                    b.Property<int>("KorisnikPozivalacId")
                        .HasColumnType("int");

                    b.Property<int>("KorisnikPozvaniId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("KorisnikPozivalacId");

                    b.HasIndex("KorisnikPozvaniId");

                    b.ToTable("PozivNaEvent");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EventId = 1,
                            IsOdbijen = false,
                            IsPrihvacen = false,
                            KorisnikPozivalacId = 2,
                            KorisnikPozvaniId = 1
                        },
                        new
                        {
                            Id = 2,
                            EventId = 2,
                            IsOdbijen = false,
                            IsPrihvacen = false,
                            KorisnikPozivalacId = 1,
                            KorisnikPozvaniId = 2
                        },
                        new
                        {
                            Id = 3,
                            EventId = 3,
                            IsOdbijen = false,
                            IsPrihvacen = true,
                            KorisnikPozivalacId = 3,
                            KorisnikPozvaniId = 1
                        });
                });

            modelBuilder.Entity("EventiApplication.WebAPI.Database.Prijateljstvo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DatumSlanjaZahtjeva")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPrihvaceno")
                        .HasColumnType("bit");

                    b.Property<int>("KorisnikPosiljalacId")
                        .HasColumnType("int");

                    b.Property<int>("KorisnikPrimalacId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KorisnikPosiljalacId");

                    b.HasIndex("KorisnikPrimalacId");

                    b.ToTable("Prijateljstvo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DatumSlanjaZahtjeva = new DateTime(2020, 7, 4, 13, 32, 13, 512, DateTimeKind.Local).AddTicks(8497),
                            IsPrihvaceno = true,
                            KorisnikPosiljalacId = 1,
                            KorisnikPrimalacId = 2
                        },
                        new
                        {
                            Id = 2,
                            DatumSlanjaZahtjeva = new DateTime(2020, 7, 4, 13, 32, 13, 512, DateTimeKind.Local).AddTicks(9367),
                            IsPrihvaceno = true,
                            KorisnikPosiljalacId = 3,
                            KorisnikPrimalacId = 1
                        });
                });

            modelBuilder.Entity("EventiApplication.WebAPI.Database.ProdajaTip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrojProdatihKarataTip")
                        .HasColumnType("int");

                    b.Property<float>("CijenaTip")
                        .HasColumnType("real");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<bool>("PostojeSjedista")
                        .HasColumnType("bit");

                    b.Property<int?>("TipKarteId")
                        .HasColumnType("int");

                    b.Property<int>("UkupnoKarataTip")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("TipKarteId");

                    b.ToTable("ProdajaTip");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrojProdatihKarataTip = 0,
                            CijenaTip = 15f,
                            EventId = 1,
                            PostojeSjedista = true,
                            TipKarteId = 1,
                            UkupnoKarataTip = 100
                        },
                        new
                        {
                            Id = 2,
                            BrojProdatihKarataTip = 1,
                            CijenaTip = 10f,
                            EventId = 2,
                            PostojeSjedista = false,
                            TipKarteId = 2,
                            UkupnoKarataTip = 1000
                        },
                        new
                        {
                            Id = 3,
                            BrojProdatihKarataTip = 0,
                            CijenaTip = 10f,
                            EventId = 3,
                            PostojeSjedista = false,
                            TipKarteId = 3,
                            UkupnoKarataTip = 1000
                        });
                });

            modelBuilder.Entity("EventiApplication.WebAPI.Database.ProstorOdrzavanja", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adresa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GradId")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TipProstoraOdrzavanjaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GradId");

                    b.HasIndex("TipProstoraOdrzavanjaId");

                    b.ToTable("ProstorOdrzavanja");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Adresa = "Obala Kulina bana 9, Sarajevo",
                            GradId = 1,
                            Naziv = "Narodno pozorište Sarajevo",
                            TipProstoraOdrzavanjaId = 1
                        },
                        new
                        {
                            Id = 2,
                            Adresa = "Alipašina bb, Sarajevo 71000",
                            GradId = 1,
                            Naziv = "Zetra",
                            TipProstoraOdrzavanjaId = 2
                        },
                        new
                        {
                            Id = 3,
                            Adresa = "Zvornička 27 Sarajevo 71000",
                            GradId = 1,
                            Naziv = "Stadion Grbavica",
                            TipProstoraOdrzavanjaId = 3
                        });
                });

            modelBuilder.Entity("EventiApplication.WebAPI.Database.Recenzija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Komentar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KupovinaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KupovinaId");

                    b.ToTable("Recenzija");
                });

            modelBuilder.Entity("EventiApplication.WebAPI.Database.Sjediste", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrojSjedista")
                        .HasColumnType("int");

                    b.Property<int>("KartaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KartaId");

                    b.ToTable("Sjediste");
                });

            modelBuilder.Entity("EventiApplication.WebAPI.Database.TipKarte", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TipKarte");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Naziv = "VIP"
                        },
                        new
                        {
                            Id = 2,
                            Naziv = "Parter"
                        },
                        new
                        {
                            Id = 3,
                            Naziv = "Tribina"
                        },
                        new
                        {
                            Id = 4,
                            Naziv = "Obicna"
                        });
                });

            modelBuilder.Entity("EventiApplication.WebAPI.Database.TipProstoraOdrzavanja", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TipProstoraOdrzavanja");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Naziv = "Sala"
                        },
                        new
                        {
                            Id = 2,
                            Naziv = "Dvorana"
                        },
                        new
                        {
                            Id = 3,
                            Naziv = "Stadion"
                        });
                });

            modelBuilder.Entity("EventiApplication.WebAPI.Database.Administrator", b =>
                {
                    b.HasOne("EventiApplication.WebAPI.Database.Grad", "Grad")
                        .WithMany("Administrator")
                        .HasForeignKey("GradId");
                });

            modelBuilder.Entity("EventiApplication.WebAPI.Database.Event", b =>
                {
                    b.HasOne("EventiApplication.WebAPI.Database.Administrator", "Administrator")
                        .WithMany("Event")
                        .HasForeignKey("AdministratorId");

                    b.HasOne("EventiApplication.WebAPI.Database.Kategorija", "Kategorija")
                        .WithMany()
                        .HasForeignKey("KategorijaId");

                    b.HasOne("EventiApplication.WebAPI.Database.Organizator", "Organizator")
                        .WithMany("Event")
                        .HasForeignKey("OrganizatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventiApplication.WebAPI.Database.ProstorOdrzavanja", "ProstorOdrzavanja")
                        .WithMany("Event")
                        .HasForeignKey("ProstorOdrzavanjaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventiApplication.WebAPI.Database.Grad", b =>
                {
                    b.HasOne("EventiApplication.WebAPI.Database.Drzava", "Drzava")
                        .WithMany("Grad")
                        .HasForeignKey("DrzavaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventiApplication.WebAPI.Database.Karta", b =>
                {
                    b.HasOne("EventiApplication.WebAPI.Database.KupovinaTip", "KupovinaTip")
                        .WithMany("Karta")
                        .HasForeignKey("KupovinaTipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventiApplication.WebAPI.Database.TipKarte", "TipKarte")
                        .WithMany()
                        .HasForeignKey("TipKarteId");
                });

            modelBuilder.Entity("EventiApplication.WebAPI.Database.Korisnik", b =>
                {
                    b.HasOne("EventiApplication.WebAPI.Database.Grad", "Grad")
                        .WithMany("Korisnik")
                        .HasForeignKey("GradId");
                });

            modelBuilder.Entity("EventiApplication.WebAPI.Database.Kupovina", b =>
                {
                    b.HasOne("EventiApplication.WebAPI.Database.Event", "Event")
                        .WithMany("Kupovina")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventiApplication.WebAPI.Database.Korisnik", "Korisnik")
                        .WithMany("Kupovina")
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventiApplication.WebAPI.Database.KupovinaTip", b =>
                {
                    b.HasOne("EventiApplication.WebAPI.Database.Kupovina", "Kupovina")
                        .WithMany("KupovinaTip")
                        .HasForeignKey("KupovinaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventiApplication.WebAPI.Database.ProdajaTip", "ProdajaTip")
                        .WithMany("KupovinaTip")
                        .HasForeignKey("ProdajaTipId");
                });

            modelBuilder.Entity("EventiApplication.WebAPI.Database.Like", b =>
                {
                    b.HasOne("EventiApplication.WebAPI.Database.Event", "Event")
                        .WithMany("Like")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventiApplication.WebAPI.Database.Korisnik", "Korisnik")
                        .WithMany("Like")
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventiApplication.WebAPI.Database.Ocjena", b =>
                {
                    b.HasOne("EventiApplication.WebAPI.Database.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventiApplication.WebAPI.Database.Korisnik", "Korisnik")
                        .WithMany()
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventiApplication.WebAPI.Database.Organizator", b =>
                {
                    b.HasOne("EventiApplication.WebAPI.Database.Grad", "Grad")
                        .WithMany("Organizator")
                        .HasForeignKey("GradId");
                });

            modelBuilder.Entity("EventiApplication.WebAPI.Database.PozivNaEvent", b =>
                {
                    b.HasOne("EventiApplication.WebAPI.Database.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventiApplication.WebAPI.Database.Korisnik", "KorisnikPozivalac")
                        .WithMany("PozivNaEventKorisnikPozivalac")
                        .HasForeignKey("KorisnikPozivalacId")
                        .IsRequired();

                    b.HasOne("EventiApplication.WebAPI.Database.Korisnik", "KorisnikPozvani")
                        .WithMany("PozivNaEventKorisnikPozvani")
                        .HasForeignKey("KorisnikPozvaniId")
                        .IsRequired();
                });

            modelBuilder.Entity("EventiApplication.WebAPI.Database.Prijateljstvo", b =>
                {
                    b.HasOne("EventiApplication.WebAPI.Database.Korisnik", "KorisnikPosiljalac")
                        .WithMany("PrijateljstvoKorisnikPosiljalac")
                        .HasForeignKey("KorisnikPosiljalacId")
                        .IsRequired();

                    b.HasOne("EventiApplication.WebAPI.Database.Korisnik", "KorisnikPrimalac")
                        .WithMany("PrijateljstvoKorisnikPrimalac")
                        .HasForeignKey("KorisnikPrimalacId")
                        .IsRequired();
                });

            modelBuilder.Entity("EventiApplication.WebAPI.Database.ProdajaTip", b =>
                {
                    b.HasOne("EventiApplication.WebAPI.Database.Event", "Event")
                        .WithMany("ProdajaTip")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventiApplication.WebAPI.Database.TipKarte", "TipKarte")
                        .WithMany()
                        .HasForeignKey("TipKarteId");
                });

            modelBuilder.Entity("EventiApplication.WebAPI.Database.ProstorOdrzavanja", b =>
                {
                    b.HasOne("EventiApplication.WebAPI.Database.Grad", "Grad")
                        .WithMany("ProstorOdrzavanja")
                        .HasForeignKey("GradId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventiApplication.WebAPI.Database.TipProstoraOdrzavanja", "TipProstoraOdrzavanja")
                        .WithMany()
                        .HasForeignKey("TipProstoraOdrzavanjaId");
                });

            modelBuilder.Entity("EventiApplication.WebAPI.Database.Recenzija", b =>
                {
                    b.HasOne("EventiApplication.WebAPI.Database.Kupovina", "Kupovina")
                        .WithMany("Recenzija")
                        .HasForeignKey("KupovinaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventiApplication.WebAPI.Database.Sjediste", b =>
                {
                    b.HasOne("EventiApplication.WebAPI.Database.Karta", "Karta")
                        .WithMany("Sjediste")
                        .HasForeignKey("KartaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
